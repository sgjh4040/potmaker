{"version":3,"sources":["logo.svg","Hooks/useInput.js","Routes/Main/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","defaultValue","useState","value","setValue","onChange","e","target","Container","styled","div","Main","speaking","useInput","writing","listening","reading","attendance","name","data","series","setSeries","chart","height","type","title","text","xaxis","categories","yaxis","min","max","labels","formatter","val","i","options","placeholder","onClick","console","log","Wrapper","props","theme","maxWidth","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,8KCE5B,WAAAC,GAAiB,IAAD,EACFC,mBAASD,GADP,mBACpBE,EADoB,KACdC,EADc,KAS3B,MAAO,CAACD,QAAOE,SANE,SAAAC,GAAK,IAELH,EACVG,EADCC,OAASJ,MAEbC,EAASD,IAEYC,a,4FCN7B,IAAMI,EAAYC,IAAOC,IAAV,KA8DAC,EA1DF,WACT,IAAMC,EAAWC,EAAS,GACpBC,EAAUD,EAAS,GACnBE,EAAYF,EAAS,GACrBG,EAAUH,EAAS,GACnBI,EAAaJ,EAAS,GALd,EAMcX,mBAAS,CAAC,CAClCgB,KAAM,SACNC,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,QARb,mBAMPC,EANO,KAMCC,EAND,OAUgBnB,mBAC1B,CACIoB,MAAO,CACHC,OAAQ,IACRC,KAAM,SAEVC,MAAO,CACHC,KAAM,+CAEVC,MAAO,CACHC,WAAY,CAAC,WAAY,UAAW,YAAa,UAAW,eAEhEC,MAAM,CACFC,IAAK,EACLC,IAAI,IACJC,OAAQ,CACNC,UAAW,SAASC,EAAKC,GACvB,OAAIA,EAAI,IAAM,EACLD,EAEA,QA9BX,mBAUPE,EAVO,UA6Cd,OACI,kBAAC5B,EAAD,KACK,2BAAO6B,YAAa,WAAYhC,SAAUO,EAASP,WACpD,2BAAOgC,YAAa,UAAWhC,SAAUS,EAAQT,WACjD,2BAAOgC,YAAa,YAAahC,SAAUU,EAAUV,WACrD,2BAAOgC,YAAa,UAAWhC,SAAUW,EAAQX,WACjD,2BAAOgC,YAAa,aAAchC,SAAUY,EAAWZ,WACvD,4BAAQiC,QAfA,WACZC,QAAQC,IAAI5B,GACZS,EAAU,CAAC,CACPH,KAAM,SACNC,KAAM,CAACP,EAAST,MAAMW,EAAQX,MAAMY,EAAUZ,MAAMa,EAAQb,MAAMc,EAAWd,YAW7E,gBACA,kBAAC,IAAD,CAAOiC,QAASA,EAAShB,OAAQA,EAAQI,KAAK,QAAQD,OAAQ,Q,6JCvD1E,IAAMkB,EAAUhC,IAAOC,IAAV,KAIK,SAAAgC,GAAK,OAAIA,EAAMC,MAAMC,YAaxBC,MAVf,WACE,OACE,kBAACJ,EAAD,KACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOK,OAAO,EAAMC,KAAM,IAAKC,UAAWrC,OCN5BsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0cf7f262.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {useState} from \"react\";\n\nexport default defaultValue => {\n    const [value,setValue] = useState(defaultValue);\n\n    const onChange = e =>{\n        const{\n            target: {value}\n        }= e;\n        setValue(value);\n    };\n    return {value, onChange, setValue};\n}","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Chart from \"react-apexcharts\";\nimport useInput from \"../../Hooks/useInput\";\n\nconst Container = styled.div`\n    margin: 0 20px;\n`;\n\nconst Main = () =>{\n    const speaking = useInput(0);\n    const writing = useInput(0);\n    const listening = useInput(0);\n    const reading = useInput(0);\n    const attendance = useInput(0);\n    const [series, setSeries] = useState([{\n        name: 'Series',\n        data: [80, 50, 30, 40, 100],\n    }])\n    const [options, setoptions] = useState(\n        {\n            chart: {\n                height: 350,\n                type: 'radar',\n            },\n            title: {\n                text: '학생 포트폴리오'\n            },\n            xaxis: {\n                categories: ['Speaking', 'Writing', 'Listening', 'Reading', 'Attendance']\n            },\n            yaxis:{\n                min: 0,\n                max:500,\n                labels: {\n                  formatter: function(val, i) {\n                    if (i % 2 === 0) {\n                      return val\n                    } else {\n                      return ''\n                    }\n                  }\n                }\n            }\n        }\n    )\n    const onClick = () => {\n        console.log(speaking);\n        setSeries([{\n            name: 'Series',\n            data: [speaking.value,writing.value,listening.value,reading.value,attendance.value],\n        }])\n    }\n\n    return (\n        <Container>\n             <input placeholder={'speaking'} onChange={speaking.onChange}></input>\n            <input placeholder={'writing'} onChange={writing.onChange}></input>\n            <input placeholder={'listening'} onChange={listening.onChange}></input>\n            <input placeholder={'reading'} onChange={reading.onChange}></input>\n            <input placeholder={'attendance'} onChange={attendance.onChange}></input>\n            <button onClick={onClick}>클릭</button>\n            <Chart options={options} series={series} type=\"radar\" height={350} />\n        </Container>\n    )\n}\n\nexport default Main;","import React from 'react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './Routes/Main/main';\n\nconst Wrapper = styled.div`\n  position: relative;\n  margin: 40px auto;\n  width: 100%;\n  /* max-width: ${props => props.theme.maxWidth}; */\n`;\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Router>\n      <Route exact={true} path={\"/\"} component={Main} />\n      </Router>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}