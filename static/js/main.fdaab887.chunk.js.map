{"version":3,"sources":["logo.svg","Hooks/useInput.js","Routes/Main/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","defaultValue","useState","value","setValue","onChange","e","target","Container","styled","div","InputBox","InfoBox","Contents","ContentBox","Category","span","Profile","props","background","Main","profile","setProfile","name","useInput","age","address","phone","strength","weakness","comments","speaking","writing","listening","reading","attendance","data","series","setSeries","chart","height","type","title","text","xaxis","categories","yaxis","min","max","labels","formatter","val","i","options","onImageChange","event","a","console","log","files","URL","createObjectURL","accept","placeholder","style","display","onClick","width","marginBottom","Wrapper","theme","maxWidth","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fdaab887.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {useState} from \"react\";\n\nexport default defaultValue => {\n    const [value,setValue] = useState(defaultValue);\n\n    const onChange = e =>{\n        const{\n            target: {value}\n        }= e;\n        setValue(value);\n    };\n    return {value, onChange, setValue};\n}","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Chart from \"react-apexcharts\";\nimport useInput from \"../../Hooks/useInput\";\n\nconst Container = styled.div`\n    margin: 0 60px;\n`;\n\nconst InputBox = styled.div`\n    border: 1px solid black;\n    padding: 20px;\n\n`;\nconst InfoBox = styled.div`\n    display: flex;\n    flex-direction: row;\n    padding: 20px;\n`;\nconst Contents = styled.div`\n    display: inherit;\n    flex-direction: column;\n    margin-left: 30px;\n`;\nconst ContentBox = styled.div`\n    padding: 5px;\n    min-height: 100px;\n    height: 100%;\n    border: 1px solid black;\n`;\nconst Category = styled.span`\n    font-weight: 700;\n    font-size: 20px;\n    margin-right: 10px;\n`;\n\nconst Profile = styled.div`\n  background-image: ${props => `url(${props.background})`};\n  background-size: cover;\n  background-position: center center;\n  width: 185px;\n    height: 280px;\n`;\n\nconst Main = () => {\n    const [isInputBox, setIsInputBox] = useState(true);\n    const [profile, setProfile] = useState('');\n    const name = useInput('');\n    const age = useInput('');\n    const address = useInput('');\n    const phone = useInput('');\n    const strength = useInput('');\n    const weakness = useInput('');\n    const comments = useInput('');\n    const speaking = useInput(0);\n    const writing = useInput(0);\n    const listening = useInput(0);\n    const reading = useInput(0);\n    const attendance = useInput(0);\n    const [series, setSeries] = useState([{\n        name: 'Series',\n        data: [80, 50, 30, 40, 100],\n    }])\n    const [options, setoptions] = useState(\n        {\n            chart: {\n                height: 350,\n                type: 'radar',\n            },\n            title: {\n                text: '학생 포트폴리오'\n            },\n            xaxis: {\n                categories: ['Speaking', 'Writing', 'Listening', 'Reading', 'Vocabulary']\n            },\n            yaxis: {\n                min: 0,\n                max: 500,\n                labels: {\n                    formatter: function (val, i) {\n                        if (i % 2 === 0) {\n                            return val\n                        } else {\n                            return ''\n                        }\n                    }\n                }\n            }\n        }\n    )\n    const onClick = () => {\n        console.log(speaking);\n        setSeries([{\n            name: 'Series',\n            data: [speaking.value, writing.value, listening.value, reading.value, attendance.value],\n        }]);\n    };\n    const onImageChange = async (event) => {\n        console.log('image change');\n        if (event.target.files && event.target.files[0]){\n            setProfile(URL.createObjectURL(event.target.files[0]))\n        }\n    }\n\n    return (\n        <Container>\n            <InputBox>\n                프로필:<input accept=\"image/*\" onChange={onImageChange} placeholder={\"프로필\"} type=\"file\"></input>\n                <input style={{ display: 'block' }} placeholder={'이름'} onChange={name.onChange}></input>\n                <input style={{ display: 'block' }} placeholder={'나이'} onChange={age.onChange}></input>\n                <input style={{ display: 'block' }} placeholder={'주소'} onChange={address.onChange}></input>\n                <input style={{ display: 'block' }} placeholder={'연락처'} onChange={phone.onChange}></input>\n                <input placeholder={'speaking'} onChange={speaking.onChange}></input>\n                <input placeholder={'writing'} onChange={writing.onChange}></input>\n                <input placeholder={'listening'} onChange={listening.onChange}></input>\n                <input placeholder={'reading'} onChange={reading.onChange}></input>\n                <input placeholder={'vocabulary'} onChange={attendance.onChange}></input>\n                <button onClick={onClick}>클릭</button>\n                <div>\n                <div>장점</div>\n                <textarea style={{width:'500px',height:'100px'}} onChange={strength.onChange}></textarea>\n                <div>단점</div>\n                <textarea onChange={weakness.onChange}></textarea>\n                <div>코멘트</div>\n                <textarea onChange={comments.onChange}></textarea>\n                </div>\n            </InputBox>\n\n            <InfoBox>\n                <Profile background={profile} />\n                <Contents>\n                    <div style={{ marginBottom: '20px' }}>\n                        <Category>\n                            이름:\n                    </Category>\n                        {name.value}\n                    </div>\n                    <div style={{ marginBottom: '20px' }}>\n                        <Category>\n                            나이:\n                    </Category>\n                        {age.value}\n                    </div>\n                    <div style={{ marginBottom: '20px' }}>\n                        <Category>\n                            주소:\n                    </Category>\n                        {address.value}\n                    </div>\n                    <div style={{ marginBottom: '20px' }}>\n                        <Category>\n                            연락처:\n                    </Category>\n                        {phone.value}\n                </div>\n                </Contents>\n            </InfoBox>\n            <Chart options={options} series={series} type=\"radar\" height={350} />\n            <div>\n                <Category style={{display:'block'}}>\n                    장점\n                </Category>\n                <ContentBox>\n                    {strength.value}\n                </ContentBox>\n            </div>\n            <div>\n                <Category>\n                    단점\n                </Category>\n                <ContentBox>\n                    {weakness.value}\n                </ContentBox>\n            </div>\n            <div>\n                <Category>\n                    코멘트\n                </Category>\n                <ContentBox>\n                    {comments.value}\n                </ContentBox>\n            </div>\n        </Container>\n    )\n}\n\nexport default Main;","import React from 'react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './Routes/Main/main';\n\nconst Wrapper = styled.div`\n  position: relative;\n  margin: 40px auto;\n  width: 100%;\n  /* max-width: ${props => props.theme.maxWidth}; */\n`;\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Router>\n      <Route exact={true} path={\"/\"} component={Main} />\n      </Router>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}